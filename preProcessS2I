#!/usr/bin/env python
# -*- encoding: utf-8 -*-
"""
@File    :   preProcessS2I.py
@Contact :   zhumeng@bupt.edu.cn
@License :   (C)Copyright 2019 zhumeng
@Modify Time      @Author    @Version    @Desciption
------------      -------    --------    -----------
2020/5/4 15:32      xm         1.0          None
"""
import time
import numpy as np
import pandas as pd
import os
from collections import Counter

'''
DEFINITION: 
PacketToProxy: 1
PacketFromProxy: -1
'''
rootPath = os.path.abspath(os.path.dirname(__file__)).split('application')[0]  # /home/byr/xiaomeng/
proxy_port = tuple(('7a', '31'))

app_label = {
    # 'Chrome': "0",
    # 'Bilibili': "1",
    'WeChat': "2",
    # 'QQMusic': "3",
    # 'SSH': "4",
    # 'IQIYI': "4",
    # 'YouKu': "5",
}


def read_from_txt(fillna=True):
    """
    Function: read raw data from txt.file of each Application which obtained from Wireshark and filter unnecessary record
    :param fillna: whether or not fill the packet NULL with 0
    :return: a Dict contain all DataFrame of each Application. s.t. data={'app1':app1_df, ...}
    """
    # DataFrame Initialization
    data = {}
    for k, v in app_label.items():
        df1 = pd.read_csv(str(rootPath) + "dataset/raw_data/" + k + ".txt", sep="\n", header=None,
                          engine='python',
                          skiprows=lambda x: x % 4 != 2, dtype='str')  # read from csv data
        df1 = df1[0].str.split('  ', expand=True)
        df1 = df1[1].str.split('|', expand=True).drop([0], axis=1)
        if fillna:
            df1.replace(to_replace=r'^\s*$', value=np.nan, regex=True, inplace=True)  # fill 0 into packet
            df1 = df1.fillna('0')
        data[k] = df1
        print(k + ' ... [Done]')
    return data


def packet_list(dict1, dict2):
    for k, v in dict1.items():
        if dict2.__contains__(k):
            dict1[k] = np.sort(np.unique(np.concatenate((dict1[k], dict2[k]), axis=0)))
    return dict1


def session_merge(data):
    """
    Function: merge the packets which belong to same session
    :param data: a Dict contain all DataFrame of each Application. s.t. data={'app1':app1_df, ...}
    :return: lists[Chrome] = {port1:[1,2,10,33,....], port2:[3,4,5,6,....],...}
    """
    lists = {}
    for aName, df in data.items():
        grouped_by_src = df.groupby([35, 36])  # return GroupBy Object
        grouped_by_dst = df.groupby([37, 38])
        list_by_src = grouped_by_src.indices
        list_by_dst = grouped_by_dst.indices
        lists[aName] = packet_list(list_by_src, list_by_dst)
        print(aName + ' ... [Done]')
    return lists


def seq2img_feature(data, lists):
    """
    Function: according the ip to obtain the sequence of packet in a session
    :param data: a Dict contain all DataFrame of each Application. s.t. data={'app1':app1_df, ...}
    :param lists: lists[Chrome] = {port1:[1,2,10,33,....], port2:[3,4,5,6,....],...}
    :return: the sequence of packet size，inter-arrival time，direction of a bidirectional flow
    """
    ndata = {}
    for aName, df in data.items():
        s = np.array([np.arange(0, 30)])
        for port, l in lists.get(aName).items():
            if port == proxy_port:
                continue
            else:
                size = [int("".join(df.iloc[i, 16:18].to_numpy()), 16) for i in l[3:13]]  # size
                intime = [(l[i] - l[i - 1]) for i in range(3, min(13, len(l)))]  # interval-time
                seq = [1 if (tuple(df.iloc[i, 36:38].values) == proxy_port) else -1 for i in l[3:13]]  # bidirection

                if len(seq) != 10:  # 补齐不足10个packet的流
                    size = size + [0] * (10 - len(seq))
                    intime = intime + [0] * (10 - len(seq))
                    seq = seq + [0] * (10 - len(seq))
                s = np.concatenate((s, np.array([size + intime + seq])), axis=0)
        ndata[aName] = pd.DataFrame(s[1:], columns=s[0])
        print(aName + ' ... [Done]')
    return ndata


def write_into_csv(data):
    """
    Function:write the sessions bytes of each Application into csv.file
    :param data: a Dict contain all df of each Application data={'app1':app1_df, ...}
    """
    for name, d in zip(data.keys(), data.values()):
        result = pd.concat([d], axis=1, ignore_index=True)
        result[result.shape[1]] = app_label[name]
        result.to_csv(str(rootPath) + "dataset/labeled_data_S2I/" + name + ".csv", mode='a', header=None, index=False)
        print(name + ' ... [Done]')


if __name__ == "__main__":
    pd.set_option('mode.chained_assignment', None)
    start = time.time()
    print("--------------------START--------------------")
    print("1. Read from txt:")
    pData = read_from_txt()
    print('---------------------------------------------')
    print("2. Merge session:")
    pList = session_merge(pData)
    print('---------------------------------------------')
    print("3. Seq2Img features:")
    fdata = seq2img_feature(pData, pList)
    print('---------------------------------------------')
    print("4. Write into csv:")
    write_into_csv(fdata)
    print("\nPreprocessed finished cost time:%f" % (time.time() - start))
